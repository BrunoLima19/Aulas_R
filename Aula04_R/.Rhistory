#B
L$nome
L[[idade]]
L[[2]]
#B
L$nome
L[[2]]
#B
L$nome
L[[1]]
L$idade
L[[2]]
# Exercício 04
#A
matA = matrix(1:1, 2, 3)
matB = matrix(1:6, 2, 3)
#D
mult = matA %*% matB
#D
matA %*% matB
# Exercício 04
#A
A = matrix(1:1, 2, 3)
A
B = matrix(1:6, 2, 3)
B
#D
mult = A %*% B
# Exercício 04
#A
matA = matrix(1:1, 2, 3)
matA
matB = matrix(1:6, 2, 3)
matB
#C
dim(matB) = c(3, 2)
matB
#D
mult = matA %*% matB
# Exercício 05
#A
L = list(nome = "João", idade = 30)
mult
#D
mult = matA %*% matB
mult
matA
matB
# Exercício 06
#A
data(pressure)
#B
mean(pressure$pressure)
#C
pressure[pressure$temperature == 320, 1]
#C
pressure[pressure$temperature == 320, 1]
#D
max(pressure[pressure$temperature<100,2])
#E
pressure[pressure$pressure<100,]
pressure
pressure
#B
mean(pressure$pressure)
#B
mean(pressure$temperature)
#C
pressure[pressure$temperature == 320, 2]
#C
pressure[pressure$temperature == 320, 1]
#C
pressure[pressure$temperature == 320]
#C
pressure[pressure$temperature == 320,]
#C
pressure[pressure$temperature == 320, 1]
#C
pressure[pressure$temperature == 17, 1]
#C
pressure[pressure$temperature == 320, 1]
#C
pressure[pressure$temperature == 320, 2]
#D
max(pressure[pressure$temperature < 100, 2])
#E
pressure[pressure$pressure < 100,]
# Exercício 07
#A
sleep
class(sleep)
# Exercício 07
#A
sleep
class(sleep)
tapply(sleep$extra, sleep$group, mean)
tapply(sleep$extra, sleep$group, mean)
#B
mapply(class,sleep)
tapply(sleep$extra, sleep$group, mean)
# Exercício 07
#A
sleep
class(sleep)
mapply(class,sleep)
#B
tapply(sleep$extra, sleep$group, mean)
# Exercício 07
#A
sleep
mapply(sleep)
class(sleep)
mapply(class,sleep)
#B
tapply(sleep$extra, sleep$group, mean)
# Exercício 01
#A
mat = matrix(1:6, 2, 3)
# Exercício 01
x = c(1, 2, 2)
x
y = c(1/2, 1, 1)
y
z = c(1/2, 1, 1)
z
y = c("1/2", 1, 1)
y
z = c(1/2, 1, 1)
z
# Exercício 01
x = c(1, 2, 2)
x
y = c(1/2, 1, 1)
y
z = c(1/2, 1, 1)
z
mat = matrix(x, y, z)
# Exercício 01
x = c(1, 2, 2)
x
y = c(1/2, 1, 1)
y
z = c(1/2, 1, 1)
z
mat = matrix(x, y, z)
mat
mat = matrix(x,y,z)
mat = cbind(x, y, z)
mat
mat = matrix(1:4, 3, 3)
mat
mat = matrix(c(x,y,z), 3, 3)
mat
# Exercício 02
media = mean(mat)
media
# Exercício 02
media = mean(x)
media
# Exercício 02
med = mean(x,)
med
m = matrix(c(x,y,z), 3, 3)
m
mediana = medi(x)
mediana = medin(x)
mediana = median(x)
mediana
# Exercício 03
cor(x, cumsum(x))
# Exercício 03
correlacao = cor(x, cumsum(x))
correlacao
# Exercíco 04
dim(mat)
# Exercíco 04
dim(mat)
# Exercíco 05
eigen(m)
#Exercício 06
floor(8.799)
ceiling(8.799)
# Exercício 07
round(8.799, 1)
# Exercício 07
round(8.799, 2)
# Exercício 07
round(8.799, 10)
# Exercício 07
round(8.799, 1)
polyroot(x^2 - 9)
# Exercício 09
setdiff(x)
# Exercício 01
x = c(1, 2, 2)
x
# Exercício 09
setdiff(x)
# Exercício 09
setdiff(x, y)
# Exercício 09
diff(x)
# Exercício 10
cumsum(z)
# Exercício 10
vetz = c(cumsum(z))
vetz
# Exercício 10
cumsum(z)
cumprod(y)
cummax(x)
# Exercício 11
sd(x)
var(x)
# Exercíio 12
a = c(0, 4, 3)
b = c(8, 1, 0)
c = c(3, 0, 1)
h = matrix(c(a, b, c) 3, 3)
h = matrix(c(a,b,c) 3, 3)
h = matrix(c(a,b,c), 3, 3)
h
apply(h, i=1, mean)
apply(h, 1, mean)
apply(h, 2, mean)
apply(h, 1, mean)
# Exercíio 12
a = c(0, 4, 3)
b = c(8, 1, 5)
c = c(3, 0, 1)
h = matrix(c(a,b,c), 3, 3)
h
apply(h, 1, mean)
# Exercício 13
x = c(3, 8, 1, 2.5)
y = c(8, 0, 2)
union(x, y)
intersect(x, y)
#D
UScereal[1:10, 1:5:2]
#Exercício 01
library(MASS)
#A
UScereal
#C
UScereal[1:10,]
#D
UScereal[1:10, 1:5:2]
#D
UScereal[1:10, 1,5,2]
#D
UScereal[1:10, 1, 3, 5]
#D
UScereal[1:10, 1, 3, 5,,,,,]
#D
UScereal[1:10, 1:5]
#D
UScereal[1:10, 1:5:2]
# Podemos escrever explicitamente
seq(by = 0.1, to = 2, from = 1)
#B
dim(UScereal)
#D
UScereal[1:10, 1:3:5]
#D
UScereal[1:10, 1]
#D
UScereal[1:10, 1, 2, 5]
#D
UScereal[1:10, 1:3]
#D
UScereal[1:10, 1:3:2]
#D
UScereal[1:10, 1:5, 2]
#D
UScereal[1:10, 1:5, 1]
#D
UScereal[1:10, 1:5, 3]
#D
UScereal[1:10, 1:5, 3]
#D
UScereal[1:10, 1:5, 4]
#D
UScereal[1:10, 1:1]
#D
UScereal[1:10, 1:1, 3:3]
#D
UScereal[1:10, 1:1, 3:3, 5:5]
#D
UScereal[1:10, seq(1, 5, 2)]
#D
UScereal[1:10, seq(1, 5, 2)]
#C
acima_media = vtotal > mean(vtotal)
acima_media
porcent = vtotal / sum(vtotal)
porcent
#E
apply(UScereal, 2, mean)
#E
a = apply(UScereal, 2, mean)
a
#E
apply(UScereal, 1, mean)
UScereal[1:10, 2]
#A
UScereal
UScereal[1:10, 1]
UScereal[1:10, 2]
UScereal[, 2]
#E
apply(UScereal[, 2], 1, mean)
#E
mean(UScereal[,2])
#E
sum(UScereal[,2])
#B
dim(UScereal)
#E
calorias = c(mean(UScereal[,2]))
calorias
#E
calorias = c(apply(UScereal, 1) > mean(UScereal[,2]))
#E
apply(UScereal, 1) > mean(UScereal[,2])
#E
mean(UScereal[,2])
alimentos = UScereal[1:10]
alimentos
alimentos = UScereal[, 1]
alimentos
alimentos = UScereal[, names]
alimentos = UScereal[, 0]
alimentos
alimentos = UScereal[, 2]
alimentos
#D
UScereal[1:10, seq(1, 5, 2)]
#E
med = mean(UScereal[,2])
med
calorias = c(alimentos > med)
calorias
getwd()
setwd("C:/Users/Bruno/OneDrive/Documentos/Aula04_R")
wich(alimentos > med)
UScereal[, 2]
UScereal[, seq(1,2,1)]
UScereal[,]
UScereal
calorias = c( UScereal[,alimentos > med])
calorias = c(UScereal[alimentos > med,])
calorias
calorias = matrix(UScereal[alimentos > med,])
calorias
calorias = matrix(UScereal[,alimentos > med])
calorias = c(UScereal[alimentos > med])
calorias = c(UScereal[alimentos > med,])
calorias
calorias = UScereal[alimentos > med,]
calorias
sum(alimentos > med)
calorias
cat("Alimentos com o número de calorias maior que a média: ",calorias,"\n")
cat(file = "muitascalorias.txt", "Alimentos com o número de calorias maior que a média: ",calorias,"\n")
calorias
cat(file = "resultado.txt", "Alimentos acima da média: ",calorias,"\n")
# O cat permite ainda enviar o conteúdo para um arquivo
cat(file = "resultado.txt", "Este eh o valor da variavel x: ",x,"\n")
x = calorias
xgetwd()
x
cat(file = "resultado.txt", "Alimentos acima da média: ",x,"\n")
cat(file = "muitascalorias.txt", "Alimentos acima da média: ",calorias,"\n")
calorias = UScereal[alimentos > med,]
tabela = read.table("muitascalorias.txt", header = TRUE)
tabela = read.table("muitascalorias.txt", header=TRUE)
tabela = read.table("my_table.txt", header=TRUE)
#Usando a função GETWD
getwd()
setwd("C:/Users/Bruno/OneDrive/Documentos/Aula04_R")
tabela = read.table("my_table.txt", header=TRUE)
tabela = read.csv("vendas.csv")
# Realizando download de arquivos
fileUrl = "http://archive.ics.uci.edu/ml/machine-learning-databases/ecoli/ecoli.data"
# Lendo o arquivo via função READ.FILE
ecoli = read.table("ecoli.csv")
dim(ecoli)
# Apresentando uma pequena amostra do arquivo ecoli.csv
head(ecoli)
calorias = c(UScereal[alimentos > med,])
calorias
cat(file = "muitascalorias.txt", "Alimentos acima da média: ",calorias,"\n")
write.table(calorias, file = "muitascalorias.txt", header = TRUE)
write.table(calorias, file = "muitascalorias.txt")
racas = c("bulldog", "rafeiro", "doberman", "rafeiro", "bulldog",
"rafeiro", "rafeiro", "doberman")
pesos = c(12, 15, 35, 10, 20, 8, 13, 25)
tamanhos = c("medio", "medio", "grande", "pequeno", "grande",
"pequeno", "medio", "grande")
df = data.frame(racas, tamanhos, pesos)
df
#Exercício 02
#A
idade = c(18, 26, 34, 53, 72)
peso = c(52, 64, 68, 72, 78)
altura = c(180, 176, 161, 150, 168)
df = data.frame(idade, peso, altura)
df
genero = c("H", "M", "M", "H", "M")
df = data.frame(idade, peso, altura, genero)
df
df$tamanhos
racas = c("bulldog", "rafeiro", "doberman", "rafeiro", "bulldog",
"rafeiro", "rafeiro", "doberman")
pesos = c(12, 15, 35, 10, 20, 8, 13, 25)
tamanhos = c("medio", "medio", "grande", "pequeno", "grande",
"pequeno", "medio", "grande")
df = data.frame(racas, tamanhos, pesos)
df
df$tamanhos
df$pesos[1:4]
#B
order(idade)
#B
order(df$idade)
#B
df(idade)
#B
df$idade
#Exercício 02
#A
idade = c(53, 34, 26, 72, 18)
peso = c(52, 64, 68, 72, 78)
altura = c(180, 176, 161, 150, 168)
genero = c("H", "M", "M", "H", "M")
df = data.frame(idade, peso, altura, genero)
df
#B
df$idade
order(idade)
#B
df(order(idade))
#B
order(df$idade)
#B
order(df)
#B
df
#B
df[order(idade)]
#B
df[order(idade,)]
#B
df[order(idade, 1:2)]
#B
df[order(idade, 1:4:2)]
#B
fd$idade
#B
df$idade
#C
nome = c("Bruno", "Beatriz", "Maria", "Alan", "Larissa")
df = c(idade, peso, altura, genero, nome)
df
df = data.frame(idade, peso, altura, genero, nome)
df
df = data.frame(nome, idade, peso, altura, genero)
df
#C
nome = c("Bruno", "Bia", "Maria", "Alan", "Lari")
df = data.frame(nome, idade, peso, altura, genero)
df
nome = "geraldo"
apelido = "neto"
toupper(nome)
paste(nome, apelido)
substr(apelido, 2, 4)
#Exercício 02
#A
idade = c(53, 34, 26, 72, 18)
peso = c(52, 64, 68, 72, 78)
altura = c(180, 176, 161, 150, 168)
genero = c("H", "M", "M", "H", "M")
df = data.frame(idade, peso, altura, genero)
df
#B
df$idade
#C
nome = c("Bruno", "Bia", "Maria", "Alan", "Lari")
df = data.frame(nome, idade, peso, altura, genero)
df
#D
toupper(nome)
df
#D
toupper(nome)
#D
df$toupper(nome)
#D
df[toupper(nome)]
#D
toupper(nome)
df = data.frame(nome, idade, peso, altura, genero)
df
#D
nome = toupper(nome)
df
df = data.frame(nome, idade, peso, altura, genero)
df
#E
write.table(df, file = "individuos.txt")
